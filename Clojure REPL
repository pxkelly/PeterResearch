REPL Instructions

Code can be entered at the bottom and executed by pressing shift+enter.

Try it now by typing (+ 1 1) in the bottom section and pressing shift+enter.

Working in another Clojure file and sending forms to the REPL is the most efficient way to work. Use the following key bindings to send code to the REPL. See the settings for more keybindings.

ctrl-alt-, then b
Execute block. Finds the block of Clojure code your cursor is in and executes that.

ctrl-alt-, s
Executes the selection. Sends the selected text to the REPL.

You can disable this help text in the settings.
Atom Ink does not appear to be installed. Install it to get a better REPL experience.
Starting REPL with lein in C:\Users\theki\.atom\packages/proto-repl/proto-no-proj
Default Proto REPL Leiningen project started
nREPL server started on port 58058 on host 127.0.0.1 - nrepl://127.0.0.1:58058
Refreshing code...
:reloading (user)
Default Proto REPL Leiningen project started
Refresh complete
(defn generatePrograms
  [terminalSet, funtionalSet]
  let [index (rand-int (count terminalSet))]
  let [program '()]
  (conj program (nth terminalSet index))
  let [index (rand-int (count terminalSet))]
  (conj program (nth terminalSet index))
  (conj program (nth functionalSet 0))
  program
  )
CompilerException java.lang.RuntimeException: Can't take value of a macro: #'clojure.core/let, compiling:(C:\Users\theki\Desktop\PeterResearch\testgp.clj:1:1) 
(defn generatePrograms
  [terminalSet, funtionalSet]
  let [index (rand-int (count terminalSet))]
  let [program '()]
  (conj program (nth terminalSet index))
  let [index (rand-int (count terminalSet))]
  (conj program (nth terminalSet index))
  (conj program (nth functionalSet 0))
  program
  )
CompilerException java.lang.RuntimeException: Can't take value of a macro: #'clojure.core/let, compiling:(C:\Users\theki\Desktop\PeterResearch\testgp.clj:1:1) 
(defn generatePrograms
  [terminalSet funtionalSet]
  let [index (rand-int (count terminalSet))]
  let [program '()]
  (conj program (nth terminalSet index))
  let [index (rand-int (count terminalSet))]
  (conj program (nth terminalSet index))
  (conj program (nth functionalSet 0))
  program
  )
CompilerException java.lang.RuntimeException: Can't take value of a macro: #'clojure.core/let, compiling:(C:\Users\theki\Desktop\PeterResearch\testgp.clj:1:1) 
(defn generatePrograms
  [terminalSet funtionalSet]
  (let [index (rand-int (count terminalSet))])
  (let [program '()])
  (conj program (nth terminalSet index))
  (let [index (rand-int (count terminalSet))])
  (conj program (nth terminalSet index))
  (conj program (nth functionalSet 0))
  program
  )
CompilerException java.lang.RuntimeException: Unable to resolve symbol: program in this context, compiling:(C:\Users\theki\Desktop\PeterResearch\testgp.clj:5:3) 
(defn generatePrograms
  [terminalSet functionalSet]
  (list (nth functionalSet 0)
        (nth terminalset (rand-int (count terminalSet)))
        (nth terminalset (rand-int (count terminalSet))))
)
CompilerException java.lang.RuntimeException: Unable to resolve symbol: terminalset in this context, compiling:(C:\Users\theki\Desktop\PeterResearch\testgp.clj:15:9) 
(defn generatePrograms
  [terminalSet functionalSet]
  (list (nth functionalSet 0)
        (nth terminalSet (rand-int (count terminalSet)))
        (nth terminalSet (rand-int (count terminalSet))))
)
user=>
#'user/generatePrograms
(defn generatePrograms
  [terminalSet functionalSet]
  (list (nth functionalSet 0)
        (nth terminalSet (rand-int (count terminalSet)))
        (nth terminalSet (rand-int (count terminalSet))))
)
user=>
#'user/generatePrograms
--------------------
(generatePrograms [2 3 4 1 5] ['+'])
